CONSTTK const
INTTK int
IDENFR v1
ASSIGN =
INTCON 114514
COMMA ,
IDENFR v2
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR v3
COMMA ,
IDENFR v4
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR v5
SEMICN ;
CONSTTK const
INTTK int
IDENFR v6
ASSIGN =
INTCON 6
SEMICN ;
CONSTTK const
CHARTK char
IDENFR a
ASSIGN =
CHRCON '\\'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
ASSIGN =
CHRCON '('
COMMA ,
IDENFR c
ASSIGN =
CHRCON '^'
SEMICN ;
CHARTK char
IDENFR d
COMMA ,
IDENFR e
COMMA ,
IDENFR f
SEMICN ;
VOIDTK void
IDENFR getDEF
LPARENT (
RPARENT )
LBRACE {
IDENFR d
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
IDENFR f
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR plus
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
CHARTK char
IDENFR upper
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR c
MINU -
LPARENT (
CHRCON 'a'
MINU -
CHRCON 'A'
RPARENT )
SEMICN ;
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR v7
ASSIGN =
IDENFR v1
PLUS +
IDENFR v2
SEMICN ;
IDENFR v3
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR v5
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR getDEF
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371434\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR d
COMMA ,
IDENFR c
COMMA ,
IDENFR e
COMMA ,
IDENFR f
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d\n"
COMMA ,
IDENFR plus
LPARENT (
IDENFR v3
COMMA ,
IDENFR v4
RPARENT )
COMMA ,
IDENFR v4
MINU -
IDENFR v3
RPARENT )
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
SEMICN ;
IDENFR ch
ASSIGN =
IDENFR upper
LPARENT (
IDENFR ch
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR v5
LSS <
IDENFR v7
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "v7 is bigger! It is %d\n"
COMMA ,
IDENFR v7
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR v5
LEQ <=
IDENFR v6
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "v5 is bigger than v7 and v6! It is %d\n"
COMMA ,
IDENFR v5
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d %d\n"
COMMA ,
IDENFR v1
PLUS +
IDENFR v2
MULT *
IDENFR v3
COMMA ,
IDENFR v4
DIV /
IDENFR v2
COMMA ,
IDENFR v7
MOD %
IDENFR plus
LPARENT (
IDENFR v1
COMMA ,
IDENFR v2
RPARENT )
COMMA ,
MINU -
LPARENT (
IDENFR v1
MINU -
IDENFR v6
RPARENT )
COMMA ,
PLUS +
LPARENT (
IDENFR v1
PLUS +
IDENFR v6
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR v6
EQL ==
IDENFR v3
MULT *
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "v6 is equal to v3*2\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR v7
NEQ !=
IDENFR v5
PLUS +
IDENFR v3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "v7 is not equal to v5+v3\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR v5
GEQ >=
IDENFR v2
PLUS +
IDENFR v3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "v5 >= v2+v3\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR v7
GRE >
INTCON 2
MULT *
IDENFR v3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "v7>2*v3\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
